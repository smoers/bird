<?php

namespace ORG\BirdBundle\Repository;

use ORG\BirdBundle\Model\Filter\FilterInterface;
use ORG\BirdBundle\Model\OrderBy\OrderByInterface;


/**
 * AuthorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AuthorRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Retourne un Objet QueryBuilder filtré et trié sur base des objets passés en parametre
     * @param FilterInterface $filter
     * @param OrderByInterface $orderBy
     * @return mixed
     */
    public function getQueryBuilderFiltered(FilterInterface $filter, OrderByInterface $orderBy)
    {
        return $orderBy->getQueryBuilder($filter->getQueryBuilder($this->createQueryBuilder('a')));
    }

    /**
     * Retourne un objet QueryBuilder trié sur base de l'objet OrderInterface passé en parametre
     * @param OrderByInterface $orderBy
     * @return mixed
     */
    public function getQueryBuilderOrderBy(OrderByInterface $orderBy)
    {
        return $orderBy->getQueryBuilder($this->createQueryBuilder('a'));
    }

    /**
     * Cette méthode retourne un objet QueryBuilder construit sur base des objets
     * FilterInterface apssé dans le tableau et de l'objet OrderByInterface s'il n'est pas NULL
     * @param array<FilterInterface> $filters
     * @param OrderByInterface|null $orderBy
     * @return mixed|null
     */
    public function getQueryBuilderFilteredArray(array $filters, OrderByInterface $orderBy = null)
    {
            $queryBuilder = null;
            //Parcoure le tableau
            foreach ($filters as $filter){
                if(is_null($queryBuilder)){
                    $queryBuilder = $filter->getQueryBuilder($this->createQueryBuilder('a'));
                }
                else{
                    $queryBuilder = $filter->getQueryBuilder($queryBuilder);
                }
            }
            //Trie si l'objet existe
            if(!is_null($orderBy)){
                $queryBuilder = $orderBy->getQueryBuilder($queryBuilder);
            }

            return $queryBuilder;

    }
}
